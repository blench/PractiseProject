/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.30
 * Generated at: 2017-07-04 03:07:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.sysmgr.menu;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class alloc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	String contextPath = request.getContextPath();

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("\t<title>分配菜单</title>\r\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/jsp/inc/meta.jsp", out, false);
      out.write("\r\n");
      out.write("\t<link  href=\"");
      out.print(contextPath);
      out.write("/js/zTree/zTreeStyle/zTreeStyle.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n");
      out.write("    <script src=\"");
      out.print(contextPath);
      out.write("/js/zTree/jquery.ztree.all-3.5.min.js\" type=\"text/javascript\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t$(document).ready(function(){\r\n");
      out.write("\t\t//改用ztree,easyui tree中如果设置cascadeCheck，如果代码中父节点设置为checked，则子节点都是checked。\r\n");
      out.write("\t\t/*\r\n");
      out.write("\t\t$('#tree1').tree({\r\n");
      out.write("\t\t    url: \"");
      out.print(contextPath);
      out.write("/sysmgr/menu/allocTree?roleId=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${roleId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("&rnd=\" + Math.random(),   \r\n");
      out.write("\t\t    method:'get',\r\n");
      out.write("\t\t    animate:true,\r\n");
      out.write("\t\t    cascadeCheck:false,\r\n");
      out.write("\t\t    checkbox:true,\r\n");
      out.write("\t\t    onBeforeLoad:function(node, param){\r\n");
      out.write("\t\t\t\t$.messager.progress({\r\n");
      out.write("\t\t\t\t\ttitle:'请稍等',\r\n");
      out.write("\t\t\t\t\tmsg:'加载数据中...'\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t    },\r\n");
      out.write("\t\t    onLoadSuccess:function(node, data){\r\n");
      out.write("\t\t    \t$.messager.progress('close');\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t*/\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar setting = {\r\n");
      out.write("            check: {\r\n");
      out.write("                enable: true,\r\n");
      out.write("                autoCheckTrigger: true\r\n");
      out.write("            },\r\n");
      out.write("            async: {\r\n");
      out.write("                enable: true,\r\n");
      out.write("                url: \"");
      out.print(contextPath);
      out.write("/sysmgr/menu/allocTree?roleId=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${roleId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("&rnd=\" + Math.random(),   \r\n");
      out.write("                autoParam: [\"id\"],\r\n");
      out.write("                type: \"post\"\r\n");
      out.write("            },\r\n");
      out.write("            data: {\r\n");
      out.write("                key: {\r\n");
      out.write("                    name: \"text\"\r\n");
      out.write("                },\r\n");
      out.write("                simpleData: {\r\n");
      out.write("                    enable: true,\r\n");
      out.write("                    idKey: \"id\",\r\n");
      out.write("                    pIdKey: \"pId\"\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        };\r\n");
      out.write("\t\t\r\n");
      out.write(" \t\t$.fn.zTree.init($(\"#tree1\"), setting);\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tfunction getSelectMenus(){\r\n");
      out.write("\t\t//var nodes = $('#tree1').tree('getChecked');\r\n");
      out.write("\t\t var treeObj = $.fn.zTree.getZTreeObj(\"tree1\");\r\n");
      out.write("         var nodes = treeObj.getCheckedNodes(true);\r\n");
      out.write("            \r\n");
      out.write("\t\tvar checkedItems = new Array();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfor(var i=0;i<nodes.length;i++){\r\n");
      out.write("\t\t\tcheckedItems.push(nodes[i].id);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\treturn checkedItems.join(\",\");\r\n");
      out.write("\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<ul class=\"ztree\" id=\"tree1\"></ul>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
